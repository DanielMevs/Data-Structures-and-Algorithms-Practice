DFS with Cache Solution

input = [ 1, 2, 4, 3 ] = nums
      i   0  1  2  3

                []
           0/  1/   \2   \3
        [1]   [2]    [4]  [3]
     1/  2| \3
    /    |   \
[1,2]  [1,4] [1,3]
 |  \
 |   \
 |2   \3
 |     \
[1,2,4] [1,2,3]

LIS[2] = LIS[3] = 1
L> If we start at index 2 or 3,
the most we can addto the subsequence
is 1.
L> We cache this result s.t. if we en-
counter another LIS[2] or LIS[3], we 
don't have to recompute this result.
L> Likewise, we determine the LIS[1]
= 2 ( we can add a 2, 4, or a 2, 3),
thus we don't have to recompute this 
value.
- Finally we determine that LIS[0] = 3,
which is our max => the final result
is 3.

LIS[0] = 3  ⬆️
LIS[1] = 2  ⬆️
LIS[2] = 1  ⬆️
LIS[3] = 1  ⬆️

* Notice how we are starting at the
last index and working our way up.


Dynamic Programming Solution

input = [ 1, 2, 4, 3 ] = nums
      i   0  1  2  3

- We start at the last index, i = 3.
- At this position, we only have one
choice, so we mark it as 1.

-Iterating in reverse, at i = 2, we
have two choices.
L> The first choice is to take the 
1 value as it is (1)
L> The second choice is to take 1 + 
LIS[i+1], in this case 1 + LIS[3].
L> Ideally, we would take the max
between these two.
L> However, we can only take the second
option if nums[i] < nums[i + 1]
=> at i = 2, we are not allowed to use
the value 1 + LIS[3], so we take 1.

- At i = 1, we could take the value 2
by itself, and that would give us 1.
L> However, the condition nums[i]<
nums[i+1] is satisfied, therefore we 
use the value 1 + LIS[2] = 2 here.

- At i = 0, we could take 1 or 1 +
LIS[1] or 1 + LIS[2] or 1 + LIS[3].
The max is 1 + LIS[1] = 3, so we 
use 3.