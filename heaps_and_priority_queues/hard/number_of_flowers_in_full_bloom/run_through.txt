>>> from heapq import heapify, heappop
>>> people = [2, 3, 7, 11]
>>> people = [(p, i) for i, p in enumerate(people)]
>>> flowers = [[1,6],[3,7],[9,12],[4,13]]
>>> start = [f[0] for f in flowers]
>>> end = [f[1] for f in flowers]
>>> heapify(end)
>>> heapify(start)
>>> count = 0
>>> result = [0] * len(people)
>>> start[0]
1
>>> people[0]
(2, 0)
>>> start[0] < people[0][0]
True
>>> start
[1, 3, 9, 4]
>>> heappop(start)
1
>>> count += 1
>>> end
[6, 7, 12, 13]
>>> end[0]
6
>>> p = people[0][0]
>>> p
2
>>> end[0] < p
False
>>> result[0] = count
>>> start
[3, 4, 9]
>>> start[0]
3
>>> p = people[1][0]
>>> p
3
>>> start[0] <= p
True
>>> heappop(start)
3
>>> count += 1
>>> end
[6, 7, 12, 13]
>>> end[0]
6
>>> p
3
>>> end[0] < p
False
>>> result[1] = count
>>> p = [2][0]
>>> start
[4, 9]
>>> start[0]
4
>>> p
2
>>> start[0] <= p
False
>>> end
[6, 7, 12, 13]
>>> end[0]
6
>>> p
2
>>> end[0] < p
False
>>> result[2] = count
>>> p = people[3][0]
>>> p
11
>>> start
[4, 9]
>>> start[0] <= p
True
>>> heappop(start)
4
>>> count += 1
>>> end
[6, 7, 12, 13]
>>> end[0]
6
>>> end[0] < p
True
>>> heappop(end)
6
>>> count -= 1
>>> result[3] = count
>>> p
11
>>> people
[(2, 0), (3, 1), (7, 2), (11, 3)]
>>> result
[1, 2, 2, 2]
